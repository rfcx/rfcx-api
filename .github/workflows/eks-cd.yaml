name: 'EKS-CD'
on:
  workflow_dispatch:
  push:
    branches:
      - eks-branch
#      - staging
concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:

#  prepare:
#    name: 'Prepare'
#    uses: rfcx/cicd/.github/workflows/notify-prepare.yaml@master
#    with:
#      repo: rfcx-api
#      workflow-id: cd.yaml
#    secrets:
#      github-token: ${{ secrets.GITHUB_TOKEN }}

configure:
    name: 'Configure'
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
    outputs:
      namespace: ${{ steps.configuration.outputs.namespace }}
      environment: ${{ steps.configuration.outputs.environment }}
    steps:
      - name: 'Conditional environment'
        id: configuration
        run: |
          echo "::set-output name=namespace::eks-test-ns"
          if [[ "$BRANCH_NAME" == "master" ]]; then
            echo "::set-output name=environment::production"
          elif [[ "$BRANCH_NAME" == "eks-branch" ]]; then
            echo "::set-output name=environment::staging"
          else
            echo "::set-output name=environment::testing"
          fi

  build:
    name: 'Build'
#    needs: [prepare, configure]
    needs: [configure]
#    uses: rfcx/cicd/.github/workflows/ecr-build-push.yaml@master
    uses: rfcx/rfcx-api/.github/workflows/eks-ecr-build-push.yaml@eks-branch
    with:
      dockerfile: build/Dockerfile
      targets: "[\"core-api\",\"core-tasks\",\"noncore-api\",\"noncore-mqtt\"]"
      tag-environment: ${{ needs.configure.outputs.namespace }}
      tag-latest: ${{ needs.configure.outputs.namespace == 'eks-test-ns' }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD_APP_DEPLOY }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD_APP_DEPLOY }}

  deploy-core-api-secrets:
    name: 'Deploy core-api secrets'
    needs: [configure]
    uses: rfcx/cicd/.github/workflows/eks-reusable-k8s-deploy-sec.yaml@eks_cicd
    with:
      tag: ${{ needs.build.outputs.unique-tag }}
      namespace: ${{ needs.configure.outputs.namespace }}
      environment: ${{ needs.configure.outputs.environment }}/core-api
      secrets_list: "AUTH0_CLIENT_ID,AUTH0_CLIENT_SECRET,AWS_ACCESS_KEY_ID,AWS_SECRET_KEY,NEW_RELIC_LICENSE_KEY,POSTGRES_PASSWORD,POSTGRES_USER,STREAM_TOKEN_SALT"
    secrets: inherit

  deploy-noncore-api-secrets:
    name: 'Deploy noncore-api secrets'
    needs: [configure]
    uses: rfcx/cicd/.github/workflows/eks-reusable-k8s-deploy-sec.yaml@eks_cicd
    with:
      tag: ${{ needs.build.outputs.unique-tag }}
      namespace: ${{ needs.configure.outputs.namespace }}
      environment: ${{ needs.configure.outputs.environment }}/noncore-api
      secrets_list: "AUTH0_CLIENT_ID,AUTH0_CLIENT_SECRET,AWS_ACCESS_KEY_ID,AWS_SECRET_KEY,CLASSY_CLIENT_ID,CLASSY_CLIENT_SECRET,FIREBASE_CLIENT_EMAIL_PLAYER_APP,FIREBASE_CLIENT_EMAIL_RANGER_APP,FIREBASE_PRIVATE_KEY_PLAYER_APP,FIREBASE_PRIVATE_KEY_RANGER_APP,GUARDIAN_KEYSTORE_PASSPHRASE,MAILCHIMP_KEY,MANDRILL_KEY,MQTT_BROKER_PASSWORD,MQTT_BROKER_USER,NEW_RELIC_LICENSE_KEY,POSTGRES_PASSWORD,POSTGRES_USER,RECAPTCHA_V3_SECRET_KEY,STRIPE_SECRET_KEY,TWILIO_ACCOUNT_SID,TWILIO_AUTH_TOKEN"
    secrets: inherit

  deploy:
    name: 'Deploy'
    needs: [build, configure]
    uses: rfcx/rfcx-api/.github/workflows/eks-reusable-k8s-deploy.yaml@eks-branch
    with:
      tag: ${{ needs.build.outputs.unique-tag }}
      namespace: ${{ needs.configure.outputs.namespace }}
    secrets:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD_APP_DEPLOY }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD_APP_DEPLOY }}

#      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOY_EKS_NONPROD }}
#      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOY_EKS_NONPROD }}



#      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD_K8S }}
#      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD_K8S }}

#  notify:
#    name: 'Notify'
#    if: ${{ always() }}
#    needs: [prepare, build, deploy]
#    uses: rfcx/cicd/.github/workflows/notify-send.yaml@master
#    with:
#      repo: rfcx-api
#      branch-name: ${{ needs.prepare.outputs.branch-name }}
#      workflow-id: cd.yaml
#      previous-run-id: ${{ needs.prepare.outputs.previous-run-id }}
#      status: ${{ needs.deploy.result }}
#      always: true
#      notification-title: 'CD: APIs'
#      notification-footer: "Build: ${{ needs.build.result || 'n/a' }} | Deploy: ${{ needs.deploy.result || 'n/a' }}"
#      notification-success-statement: '{0} deployed the build!'
#    secrets:
#      slack-webhook: ${{ secrets.SLACK_ALERT_COREDT_WEBHOOK }}
#      github-token: ${{ secrets.GITHUB_TOKEN }}
