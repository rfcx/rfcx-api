name: 'CD'
on:
  workflow_dispatch:
  push:
    branches:
      - master
      - staging
      - feature/migrate-to-ga
concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:

  prepare:
    name: 'Prepare'
    uses: rfcx/cicd/.github/workflows/notify-prepare.yaml@master
    with:
      repo: rfcx-api
      workflow-id: cd.yaml
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  configure:
    name: 'Configure'
    runs-on: ubuntu-latest
    outputs:
      namespace: ${{ steps.configuration.outputs.namespace }}
      ecr-repository-postfix: ${{ steps.configuration.outputs.ecr-repository-postfix }}
    steps:
      - name: 'Conditional environment'
        id: configuration
        run: |
          if [[ "${{ needs.prepare.outputs.branch-name }}" == "master" ]]; then
            echo "::set-output name=namespace::production"
          elif [[ "${{ needs.prepare.outputs.branch-name }}" == "staging" ]]; then
            echo "::set-output name=namespace::staging"
          else
            echo "::set-output name=namespace::testing"
          fi

  build:
    name: 'Build and Push'
    needs: [prepare, configure]
    uses: ./.github/workflows/reusable-ecr-build-push.yaml
    with:
      dockerfile: build/Dockerfile
      targets: "[\"core-api\",\"core-tasks\",\"noncore-api\",\"noncore-mqtt\"]"
      tag: ${{ needs.configure.outputs.namespace }}
      tag-latest: ${{ needs.configure.outputs.namespace == 'production' }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    name: 'Deploy'
    needs: [build, configure]
    runs-on: ubuntu-latest
    steps:
      - name: 'TODO'
        run: |
          echo Not implemented

  notify:
    name: 'Notify'
    if: ${{ always() }}
    needs: [prepare, build, deploy]
    uses: rfcx/cicd/.github/workflows/notify-send.yaml@master
    with:
      repo: rfcx-api
      branch-name: ${{ needs.prepare.outputs.branch-name }}
      workflow-id: cd.yaml
      previous-run-id: ${{ needs.prepare.outputs.previous-run-id }}
      status: ${{ needs.deploy.result }}
      notification-title: 'CD: APIs'
      notification-footer: "Buid: ${{ needs.build.result || 'n/a' }} | Deploy: ${{ needs.deploy.result || 'n/a' }}"
    secrets:
      slack-webhook: ${{ secrets.SLACK_ALERT_COREDT_WEBHOOK }}
      github-token: ${{ secrets.GITHUB_TOKEN }}
    