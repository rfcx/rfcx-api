pipeline {
    agent {
        kubernetes {
            yaml """
kind: Pod
metadata:
  name: kaniko
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    volumeMounts:
      - name: docker-config
        mountPath: /kaniko/.docker
  volumes:
    - name: docker-config
      configMap:
        name: docker-config
"""
        }
    }
    environment {
        APIHTTP="api"
        APIMQTT="api-mqtt"
        APIMEDIA="api-media"
        PHASE=branchToConfig(BRANCH_NAME)
        ECR="887044485231.dkr.ecr.eu-west-1.amazonaws.com"
    }

    stages {
        stage("Build") {
            when {
                 expression { BRANCH_NAME ==~ /(develop|staging|master)/ }
            }
            steps {
                slackSend (channel: "#${slackChannel}", color: '#FF9800', message: "*HTTP API*: Build started <${env.BUILD_URL}|#${env.BUILD_NUMBER}> commit ${env.GIT_COMMIT[0..6]} on ${env.BRANCH_NAME}")
                container(name: 'kaniko') {
                    sh """
                    /kaniko/executor --snapshotMode=redo --use-new-run=true --cache=true --cache-repo=${ECR}/${APIHTTP}_${PHASE} --dockerfile `pwd`/build/Dockerfile --context `pwd` --destination=${ECR}/${APIHTTP}_${PHASE}:latest --destination=${ECR}/${APIHTTP}_${PHASE}:$BUILD_NUMBER
                    """
                }
            }
            post {
                success {
                    slackSend (channel: "#${slackChannel}", color: '#3380C7', message: "*HTTP/MQTT API*: Image built on build <${env.BUILD_URL}|#${env.BUILD_NUMBER}>")
                    echo 'Compile Stage Successful'
                }
                failure {
                    slackSend (channel: "#${slackChannel}", color: '#F44336', message: "*HTTP/MQTT API*: Image build failed <${env.BUILD_URL}|#${env.BUILD_NUMBER}>")
                    echo 'Compile Stage Failed'
                }
            }
        }
        stage('Deploy') {
            agent {
                label 'slave'
            }
            when {
                expression { BRANCH_NAME ==~ /(develop|staging|master)/ }
            }
            steps {
                sh "find . -type f -path 'build/${PHASE}' -name 'deployment.yaml' -exec sed -i 's|:latest|:${BUILD_NUMBER}|g' {} +"
                sh "kubectl -n ${PHASE} apply -f build/${PHASE} --recursive"
            }
        }
        stage('Verify') {
            agent {
                label 'slave'
            }
            when {
                expression { BRANCH_NAME ==~ /(develop|staging|master)/ }
            }
            steps {
                sh 'for i in `find build/${PHASE} -mindepth 1 -maxdepth 1 -type d | sed "s/build\/${PHASE}\///"`
                    do
                    kubectl rollout status deployment $i --namespace ${PHASE}
                    done'
                slackSend (channel: "#${slackChannel}", color: '#4CAF50', message: "*HTTP/MQTT API*: Deployment completed <${env.BUILD_URL}|#${env.BUILD_NUMBER}>")
            }
        }
    }
}

def branchToConfig(branch) {
    script {
        result = "NULL"
        if (branch == 'develop') {
             result = "testing"
             slackChannel = "alerts-deployment"
        }
        if (branch == 'staging') {
             result = "staging"
             slackChannel = "alerts-deployment"
        }
        if (branch == 'master') {
             result = "production"
             slackChannel = "alerts-deployment-prod"
        }
        echo "BRANCH:${branch} -> CONFIGURATION:${result}"
    }
    return result
}
