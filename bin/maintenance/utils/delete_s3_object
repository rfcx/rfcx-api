#!/usr/bin/env node
const args = process.argv.slice(2)

const s3 = require('s3')
const fs = require('fs')

if (fs.existsSync(__dirname + '/../../../config/env_vars.js')) {
  const env = require(__dirname + '/../../../config/env_vars.js').env
  for (i in env) { process.env[i] = env[i] }
}

const BUCKET = ((args[args.indexOf('--bucket')] === ('--bucket')) ? args[args.indexOf('--bucket') + 1] : process.env.ASSET_BUCKET_AUDIO)
const KEY = ((args[args.indexOf('--key')] === ('--key')) ? args[args.indexOf('--key') + 1] : null)

const client = s3.createClient({
  maxAsyncS3: 20,
  s3RetryCount: 3,
  s3RetryDelay: 1000,
  multipartUploadThreshold: 20971520,
  multipartUploadSize: 15728640,
  s3Options: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_KEY,
    Bucket: BUCKET
  }
})

function deleteOneObject (key) {
  if (key != null) {
    const deleteOne = client.deleteObjects({ Bucket: BUCKET, Delete: { Objects: [{ Key: key }], Quiet: false } })
    deleteOne.on('error', function (err) { process.stderr.write(err.stack) })
    deleteOne.on('end', function () { })
    deleteOne.on('data', function (d) { process.stdout.write(d.Deleted[0].Key) })
  }
}

deleteOneObject(KEY)
