#!/usr/bin/env node
var args = process.argv.slice(2)

var s3 = require('s3')
var fs = require('fs')

if (fs.existsSync(__dirname + '/../../../config/env_vars.js')) {
  var env = require(__dirname + '/../../../config/env_vars.js').env
  for (i in env) { process.env[i] = env[i] }
}

var PREFIX = ((args[args.indexOf('--prefix')] === ('--prefix')) ? args[args.indexOf('--prefix') + 1] + '/' : '')

var client = s3.createClient({
  maxAsyncS3: 20,
  s3RetryCount: 3,
  s3RetryDelay: 1000,
  multipartUploadThreshold: 20971520,
  multipartUploadSize: 15728640,
  s3Options: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_KEY,
    Bucket: process.env.ASSET_BUCKET_AUDIO
  }
})

var fileCount = 0

function scanAllFiles (prefix) {
  var getList = client.listObjects({ s3Params: { Bucket: process.env.ASSET_BUCKET_AUDIO, Prefix: prefix, Delimiter: '/' }, recursive: false })
  getList.on('error', function (err) { process.stderr.write(err.stack) })
  getList.on('end', function () { if (fileCount > 0) { /* console.log(fileCount); */ } })

  getList.on('data', function (d) {
    if (d.CommonPrefixes.length > 0) {
      for (i in d.CommonPrefixes) {
        // process.stderr.write(d.CommonPrefixes[i].Prefix);
        scanAllFiles(d.CommonPrefixes[i].Prefix)
      }
    } else if (d.Contents.length > 0) {
      for (i in d.Contents) {
        if (fileCount > 0) { process.stdout.write(',') } else { process.stdout.write('[') }
        process.stdout.write('"' + d.Contents[i].Key + '"')
        fileCount++
      }
    }
  })
}

scanAllFiles(PREFIX)
