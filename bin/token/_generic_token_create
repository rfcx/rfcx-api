#!/usr/bin/env node
var args = process.argv.slice(2)
var token = require('../../utils/internal-rfcx/token.js').token

// this outputs a tab separated list of tokens, and saves them to the database

var howManyTokens = ((args[args.indexOf('--how_many')] === ('--how_many')) ? parseInt(args[args.indexOf('--how_many') + 1]) : 1)
var finalParams = {}
var possibleParams = [
  ['what_kind_of_token', 'string'],
  ['use_this_token_value', 'string'],
  ['token_length', 'integer'],
  ['reference_tag', 'string'],
  ['owner_primary_key', 'integer'],
  ['token_type', 'string'],
  ['minutes_until_expiration', 'integer'],
  ['only_allow_access_to', 'string'],
  ['created_by', 'string'],
  ['created_for', 'string'],
  ['allowed_redemptions', 'integer'],
  ['allow_garbage_collection', 'boolean']
]

for (i in possibleParams) {
  if (args[args.indexOf('--' + possibleParams[i][0])] === ('--' + possibleParams[i][0])) {
    finalParams[possibleParams[i][0]] = args[args.indexOf('--' + possibleParams[i][0]) + 1]
    if (possibleParams[i][1] === 'integer') {
      finalParams[possibleParams[i][0]] = parseInt(finalParams[possibleParams[i][0]])
    }
  }
}

var rtrnTokens = []
console.log('')

for (var i = 0; i < howManyTokens; i++) {
  switch (finalParams.what_kind_of_token) {
    case 'anonymous':
      token.createAnonymousToken(finalParams).then(function (tkn) {
        rtrnTokens.push({
          type: finalParams.what_kind_of_token,
          guid: tkn.token_guid,
          token: tkn.token,
          expires_at: tkn.token_expires_at.toISOString()
        })
        if (rtrnTokens.length == howManyTokens) {
          for (var j = 0; j < howManyTokens; j++) {
            console.log('token/' + rtrnTokens[j].guid)
            console.log(rtrnTokens[j].token)
          }
          console.log('')
        }
      }).done()
      break

    case 'user':
      token.createUserToken(finalParams).then(function (tkn) {
        rtrnTokens.push({
          type: finalParams.what_kind_of_token,
          guid: tkn.token_guid,
          token: tkn.token,
          expires_at: tkn.token_expires_at.toISOString()
        })
      }).done()
      break

    case 'registration':
      token.createRegistrationToken(finalParams).then(function (tkn) {
        rtrnTokens.push({
          type: finalParams.what_kind_of_token,
          code: (tkn.token_guid + tkn.token).toUpperCase(),
          expires_at: tkn.token_expires_at.toISOString()
        })
        if (rtrnTokens.length == howManyTokens) {
          for (var j = 0; j < howManyTokens; j++) {
            console.log(rtrnTokens[j].code)
          }
          console.log('')
        }
      }).done()
      break

    default:
      token.createAnonymousToken(finalParams).then(function (tkn) {
        rtrnTokens.push({
          type: finalParams.what_kind_of_token,
          guid: tkn.token_guid,
          token: tkn.token,
          expires_at: tkn.token_expires_at.toISOString()
        })
        if (rtrnTokens.length == howManyTokens) {
          for (var j = 0; j < howManyTokens; j++) {
            console.log(rtrnTokens[j].guid + '\t' + rtrnTokens[j].token + '\t' + rtrnTokens[j].expires_at)
          }
          console.log('')
        }
      }).done()
  }
}
