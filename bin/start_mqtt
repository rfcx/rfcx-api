#!/usr/bin/env node
console.log('----------------------------------\nRFCX | ./bin/start_mqtt started')

console.log(new String(require("child_process").execSync(process.cwd()+"/bin/setup")));

var appId = "rfcx-api-mqtt";

var debug = require("debug")(appId);
var app = require("../app-mqtt");
var models = require("../models");

console.log('RFCX | Starting server');

var httpServer = app.http.listen(app.http.get('port'), function(){
  console.log("http: "+app.http.get("title")+" (port "+app.http.get('port')+") ("+process.env.NODE_ENV+")");
});

var mqttConnect = app.mqtt.on("connect", function(){
    console.log("mqtt: "+appId+" ("+app.mqtt.options.protocol+"://"+app.mqtt.options.host+":"+app.mqtt.options.port+") ("+process.env.NODE_ENV+")");
    app.mqtt.subscribe("guardians/checkins");
    console.log("mqtt: subscribed to 'guardians/checkins'");
});

var mqttError = app.mqtt.on("error", function(err){
    console.log(err);
//    app.mqtt.end()
});


var processMqttCheckIn = require("../utils/rfcx-checkin-mqtt/guardians-checkins-mqtt.js").processMqttCheckIn;

var mqttMessage = app.mqtt.on("message", function(topic, data){
  
  var rtrnJson = {
      checkin_id: null, 
        audio: [],
        screenshots: [],
        logs: [], 
        messages: [], 
        instructions: {
          messages: []
        } 
      };

  processMqttCheckIn(data).then(function(json){
    console.log(json);
    });

});